
Description of the LoRain payload structure.
(Payload structure version 1.00, revision A)


***************************************************************************************************

1. MAIN STRUCTURE OF PI LORAIN PAYLOAD STRUCTURE:

|       <HEADER>     |                                              <SENSOR DATA>                                                     |
 <CRC> <msgID> <info> <battery> <solar> <precipitation> <air_temperature> <relative_humidity> <deltaT> <dewPoint> <vpd> <leaf_wetness>



Packets description:

<CRC>: 2 Bytes

offset  0 / 2 bytes: CR = 16-bit CRC - Checksum of all following Bytes.

<msgID>: 2 Bytes

offset  0 / 1 byte:  MN = Incrementing message number
offset  1 / 1 byte:  SI = unique ID of the datagram structure (0x80 = LoRain payload structure)

<info>: 10 Bytes

offset  0 / 1 byte:  SV = payload structure subversion (0x01 -> version 1.00)
offset  1 / 2 bytes: HW = HW version (LSB = version 0.01)
offset  3 / 2 bytes: FW = FW version (LSB = version 0.01)
offset  5 / 1 byte:  DS = device status
offset  6 / 4 bytes: SN = 32-bit device serial number (the same format like at iMetos)

<battery>: 2 Bytes

offset  0 / 2 bytes: 16-bit unsigned value of battery voltage (LSB = 1 mV)
		     Sensor code: 0x0007

<solar>: 2 Bytes

offset  0 / 2 bytes: 16-bit unsigned value of solar panel voltage (LSB = 1 mV)
		     Sensor code: 0x001E

<precipitation>: 2 Bytes

offset  0 / 2 bytes: 16-bit unsigned accumulative value of precipitation (LSB = 0.1 mm)
		     Sensor code: 0x0300

<air_temperature>: 6 Bytes

offset  0 / 2 bytes: 16-bit signed average value of air temperature (LSB = 0.01 degree C.)
offset  2 / 2 bytes: 16-bit signed minimal value of air temperature (LSB = 0.01 degree C.)
offset  4 / 2 bytes: 16-bit signed maximal value of air temperature (LSB = 0.01 degree C.)
		     Sensor code: 0x01F1

<relative_humidity>: 6 Bytes

offset  0 / 2 bytes: 16-bit unsigned average value of relative humidity (LSB = 0.1 %)
offset  2 / 2 bytes: 16-bit unsigned minimal value of relative humidity (LSB = 0.1 %)
offset  4 / 2 bytes: 16-bit unsigned maximal value of relative humidity (LSB = 0.1 %)
		     Sensor code: 0x0301

<deltaT>: 6 Bytes

offset  0 / 2 bytes: 16-bit signed average value of deltaT (LSB = 0.01 degree C.)
offset  2 / 2 bytes: 16-bit signed minimal value of deltaT (LSB = 0.01 degree C.)
offset  4 / 2 bytes: 16-bit signed maximal value of deltaT (LSB = 0.01 degree C.)
		     Sensor code: 0x001B

<dewPoint>: 4 Bytes

offset  0 / 2 bytes: 16-bit signed average value of deltaT (LSB = 0.01 degree C.)
offset  2 / 2 bytes: 16-bit signed minimal value of deltaT (LSB = 0.01 degree C.)
		     Sensor code: 0x5513

<vpd>: 4 Bytes

offset  0 / 2 bytes: 16-bit unsigned average value of Vapour Pressure Deficit (LSB = 0.01 kPa)
offset  2 / 2 bytes: 16-bit unsigned minimal value of Vapour Pressure Deficit (LSB = 0.01 kPa)
		     Sensor code: 0x0019

<leaf_wetness>: 1 Byte

offset  0 / 1 byte:  8-bit unsigned value of leaf wetness time (LSB = 1 minute)
		     Sensor code: 0x0004

* all multi-byte binary fields are ordered little endian


***************************************************************************************************

1.1 "Incrementing message number" (MN) definition:

- MN number is being incremented		-> if the payload contents new data.
- MN number remained (not being incremented) 	-> if the payload contents the same data, in case if device is repeating tha payload transmission.


***************************************************************************************************

1.2 Device status (DS) definition:

- 8-bit length device status number contains status of LoRain device, events, other paramters or requests.

bit0:        REQUEST		1 - Request for all current settings incl. timestamp.
	     			0 - No request.
bit2-bit1:   RESET EVENT	0b00 - No reset event.
             			0b01 - EVENT: Power-on or Brow-out reset
             			0b10 - EVENT: Watchdog reset
             			0b11 - EVENT: Other reset
bit3:        LORA EVENT		1 - LoRa module start-up failed.
				0 - No event/error.
bit4:        LORA EVENT         1 - LoRa module communication error (at previous communication process).
				0 - No event/error.
bit5:	     SW RESET EVENT     1 - System SW reset occured.
				0 - No event.
bit7-bit6:   0 (not used, all is zero)


***************************************************************************************************

2. EXAMPLES

2.1 Example of Above Defined Standard Datagram

CR = 0xEA69

MN = 0x19
SI = 0x80

SV = 0x01
HW = 1.10 (0x006E)
FW = 1.00 (0x0064)
DS = 0x05 (bit0 = 1: Request for response with settings, bit2-bit1 = 0b10: Watchdog reset occured before this transmission)
SN = 03401234

Sensor data:

S1	<battery>			= 2450 mV
S2	<solar> 			= 1825 mV
S3	<precipitation> 		= 360 (accumulative value in [0.1 mm])
S4	<air_temperature> average	= 15.62 degree C.
S5	<air_temperature> min		= 14.50 degree C.
S6	<air_temperature> max		= 16.02 degree C.
S7	<relative_humidity> average	= 72.3 %
S8	<relative_humidity> min		= 71.0 %
S9	<relative_humidity> max		= 73.1 %
S10	<deltaT> average		= 2.55 degree C.
S11	<deltaT> min			= 2.12 degree C.
S12	<deltaT> max			= 2.89 degree C.
S13	<dewPoint> average		= 0.59 degree C.
S14     <dewPoint> min			= -1.21 degree C.
S15	<vpd> average			= 1.17 kPa
S16	<vpd> min			= 0.95 kPa
S17	<leaf_wetness>			= 15 min.


Datagram structure (47 Bytes in HEX as example):

 CR  |MN|SI|SV| HW  | FW  |DS|    SN     | S1  | S2  | S3  | S4  | S5  | S6  | S7  | S8  | S9  | S10 | S11 | S12 | S13 | S14 | S15 | S16 |S17|
69 EA 19 80 01 6E 00 64 00 05 34 12 40 03 92 09 21 07 68 01 1A 06 AA 05 42 06 D3 02 C6 02 DB 02 FF 00 D4 00 21 01 3B 00 87 FF 75 00 5F 00 0F


***************************************************************************************************

3. CRC-16 ALGORITHM USING POLYNOM 0x8005:

const rom unsigned far int CRC16tbl [ 256 ] = {
0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040 };

unsigned short addCRC(unsigned short crc, unsigned char dataByte)
{
    unsigned int crc16int;

    memcpypgm2ram(&crc16int, &CRC16tbl[ ( crc & 0xFF ) ^ dataByte ], 2);

    return ( ( crc >> 8 ) ^ crc16int );
}

unsigned short crc16_calc(char *pBuffer, unsigned short length)
{
    unsigned short crc16 = 0;

    while (length--)
	crc16 = addCRC( crc16, *pBuffer++);

    return crc16;
}

